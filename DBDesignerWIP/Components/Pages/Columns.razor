@page "/columns"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager nav
<link rel="stylesheet" href="styles.css" />
@if(DataStore.activeDatabase == null)
{
    @("No database selected!")
}
else if (DataStore.activeDatabase.tables.Count == 0)
{
    @("Empty database!")
}
else
{
    <h1>Columns</h1>
    <button @onclick="@(()=>nav.NavigateTo("/createcolumn"))">Create column</button>
    <select @bind="table">
        @foreach (string s in Choices.GetTableNames())
        {
            <option>@s</option>
        }
    </select>
    <table>
        <thead>
            <tr>
                <td>Name</td>
                <td>Type</td>
                <td>Size</td>
                <td>Default</td>
                <td>Default value</td>
                <td>Options</td>
                <td>Zerofill</td>
                <td>Unsigned</td>
                <td>Auto increment</td>
                <td>Charset</td>
                <td>Collate</td>
                <td>Edit</td>
                <td>Drop</td>
                <td>Comment</td>
            </tr>
        </thead>
        <tbody>
            @{
                counter = 0;
            }
            @foreach (Column c in DataStore.activeDatabase.GetTableByName(table).columns)
            {
                int counter2 = counter;
                <tr>
                    <td>@c.name</td>
                    <td>@c.type</td>
                    <td>
                        @if(c is TextColumn)
                        {
                            @((c as TextColumn).size)
                            
                        }
                        @if(c is IntegerColumn)
                        {
                            @((c as IntegerColumn).size)
                        }
                        @if (c is BinaryColumn)
                        {
                            @((c as BinaryColumn).size)
                        }
                        @if (c is DecimalColumn)
                        {
                            @((c as DecimalColumn).size)
                            @(", ")
                            @((c as DecimalColumn).d)
                        }
                        else @("")
                    </td>
                    <td>
                        @(c.defaultValueSupported.ToString())
                    </td>
                    <td>
                        @(c.defaultValue)
                    </td>
                    <td>
                        @if(c is EnumColumn)
                        {
                            @((c as EnumColumn).GetOptions())
                        }
                        else @("")
                    </td>
                    <td>
                        @if(c is IntegerColumn)
                        {
                            @((c as IntegerColumn).zerofill)
                        }
                        else @("")
                    </td>
                    <td>
                        @if (c is IntegerColumn)
                        {
                            @((c as IntegerColumn).unsigned)
                        }
                        else @("")
                    </td>
                    <td>
                        @if (c is IntegerColumn)
                        {
                            @((c as IntegerColumn).autoincrement)
                        }
                        else @("")
                    </td>
                    <td>
                        @if(c is TextColumn)
                        {
                            @((c as TextColumn).charset)
                        }
                        else @("")
                    </td>
                    <td>
                        @if (c is TextColumn)
                        {
                            @((c as TextColumn).collate)
                        }
                        else
                            @("")

                    </td>
                    <td @onclick="@(() => Edit(counter2))">Edit</td>
                    <td @onclick="@(() => Drop(counter2))">Drop</td>
                    <td>@c.comment</td>
                </tr>
                counter = counter + 1;
            }
        </tbody>
    </table>

    <h1>Constraints</h1>
    <button @onclick="@(()=>nav.NavigateTo("/createconstraint"))">Create constraint</button>
    <table>
        <thead>
            <td>Name</td>
            <td>Type</td>
            <td>Local columns</td>
            <td>Remote table</td>
            <td>Remote columns</td>
            <td>Edit</td>
            <td>Drop</td>
        </thead>
        <tbody>
            @{
                counter3 = 0;
            }
            @foreach (Constraint c in DataStore.activeDatabase.GetTableByName(table).constraints)
            {
                int counter4 = counter3;

                if (c is ConstraintPK)
                {
                    ConstraintPK con = c as ConstraintPK;
                    <tr>
                    <td>@("PRIMARY KEY")</td>
                    <td>@("PRIMARY KEY")</td>
                    <td>@(con.GetLocalColumns())</td>
                    <td></td>
                    <td></td>
                    <td @onclick="@(() => EditConstraint(counter4))">Edit</td>
                    <td @onclick="@(() => DropConstraint(counter4))">Drop</td>
                    </tr>
                }

                if (c is ConstraintUQ)
                {
                    ConstraintUQ con = c as ConstraintUQ;
                    <tr>
                <td>@("UNIQUE KEY")</td>
                <td>@(con.name)</td>
                <td>@(con.GetLocalColumns())</td>
                <td></td>
                <td></td>
                <td @onclick="@(() => EditConstraint(counter4))">Edit</td>
                <td @onclick="@(() => DropConstraint(counter4))">Drop</td>
                </tr>
                }

                if (c is ConstraintK)
                {
                    ConstraintK con = c as ConstraintK;
                <tr>
                <td>@("KEY")</td>
                <td>@(con.name)</td>
                <td>@(con.GetLocalColumns())</td>
                <td></td>
                <td></td>
                <td @onclick="@(() => EditConstraint(counter4))">Edit</td>
                <td @onclick="@(() => DropConstraint(counter4))">Drop</td>
                </tr>
                }

                if (c is ConstraintFK)
                {
                    ConstraintFK con = c as ConstraintFK;
                    <tr>
                <td>@("FOREIGN KEY")</td>
                <td>@(con.name)</td>
                <td>@(con.GetLocalColumns())</td>
                <td>@(con.GetRemoteTable())</td>
                <td>@(con.GetRemoteColumns())</td>
                <td @onclick="@(() => EditConstraint(counter4))">Edit</td>
                <td @onclick="@(() => DropConstraint(counter4))">Drop</td>
                </tr>
                }

                counter3 = counter3 + 1;
            }
        </tbody>
    </table>
}



@code {
    public string table { get; set; } = DataStore.activeDatabase.tables.Count > 0 ? Choices.GetTableNames()[0] : "";
    int counter = 0;
    int counter3 = 0; 

    public void Edit(int row)
    {

    }

    public void Drop(int row)
    {
        string name, errorMessage;
        if (Methods.DropTable(row, out name, out errorMessage))
        {

        }
        else
        {
            JS.InvokeVoidAsync("alert", errorMessage);
        }
    } 

    public void EditConstraint(int row)
    {

    }

    public void DropConstraint(int row)
    {
        
    }
    }

